function out = computeSlopes(data,subj,time,model)

out = table;
out.subj = data.(subj);
out.time = data.(time);
 
if iscell(data.(subj))
    data.(subj) = nominal(data.(subj));
end
 
mdl = fitlme(data,model,'FitMethod','ML'); %
%%%
[yp ci] = predict(mdl,data);
 
out.yp = yp;
 
[list,i] = unique(data.(subj),'stable');
 
int1 = []; slope1 = []; mn = []; mx = []; rng = []; nobs = [];
for ii = 1:numel(list)
    i1 = find(data.(subj)==list(ii));
    x = [ones(numel(i1),1) data.(time)(i1)];
    b = pinv(x)*yp(i1);
       
    int1(i1,1) = b(1);
    slope1(i1,1) = b(2);
    mn(i1,1) = min(x(:,2));
    mx(i1,1) = max(x(:,2));
    rng(i1,1) = range(x(:,2));
    nobs(i1,1) = numel(i1);
end
 
out.intercept = int1;
out.slope = slope1;
out.minTime = mn;
out.maxTime = mx;
out.rangeTime = rng;
out.nobs = nobs;
 
%%%
[vals, names, stats] = randomEffects(mdl);
 
[i1,i2] = ismember(data.(subj),list);
 
 
k1 = searchCellStr('Intercept',names.Name);
[j1,j2] = ismember(cellstr(list),names.Level(k1));
k1 = k1(j2(j1));
 
 
int = nan(numel(list),1); int(j1) = vals(k1);%+mdl.Coefficients.Estimate(searchCellStr('^\(Intercept\)$',mdl.Coefficients.Name));
out.alt_intercept = int(i2);
 
seb = stats.SEPred;
 
%%%
% keyboard
k2 = searchCellStr(time,names.Name);
[j1,j2] = ismember(cellstr(list),names.Level(k2));
k2 = k2(j2(j1));
 
if ~isempty(searchCellStr(['^' time '$'],mdl.Coefficients.Name))
    sl = nan(numel(list),1); sl(j1) = vals(k2);%+mdl.Coefficients.Estimate(searchCellStr(['^' time '$'],mdl.Coefficients.Name));
    se = nan(numel(list),1); se(j1) = seb(k2);
else
    sl = nan(numel(list),1); sl(j1) = vals(k2);
    se = nan(numel(list),1); se(j1) = seb(k2);
end
out.alt_slope = sl(i2);
out.alt_slope_se = se(i2);
